# -*- coding: utf-8 -*-
"""CURT_IGGM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16tmIPuHVm57dP8ckWoi9-a4T_lv4J6sR
"""

import numpy as np

def simulated_data_codes(nn=60,
                         samples=300,
                         case=1,
                         numhub=3,
                         bighub=10,
                         bigwgt=1,
                         disconnected=15,
                         meanval=0,
                         sdval=1,
                         binaryopt=False):



    ssigma = np.zeros((nn, nn))
    np.fill_diagonal(ssigma, 1)

    covx = np.zeros((nn, 2))

    for i in range(nn):
        covx[i, 0] = np.random.uniform()
        covx[i, 1] = np.random.uniform()

    dij = np.zeros((nn, nn))
    for i in range(nn):
        for j in range(nn):
            dij[i, j] = np.sqrt((covx[i, 0] - covx[j, 0]) ** 2
             + (covx[i, 1] - covx[j, 1]) ** 2)

    counts = 0
    yyy = bighub
    conx = np.zeros((nn, nn))
    for i in range(numhub):
        tmp = np.argsort(dij[i, :])[:bighub]
        conx[i, tmp] = 1
        conx[tmp, i] = 1

    for xx in range(nn - disconnected, nn):
        for yy in range(nn):
            conx[xx, yy] = 0
            conx[yy, xx] = 0

    np.fill_diagonal(conx, 0)


    temp = np.ones((nn, nn))
    for ii in range(nn):
        for iii in range(ii+1):
            temp[iii, ii] = 0



    premat = np.random.uniform(0, 1, (nn, nn))
    premat[temp == 0] = 0
    np.fill_diagonal(premat, 1)
    premat[conx != 1] = 0
    premat = premat - premat.T
    premat[(premat > 0) & (premat < 0.5)] -= 1
    np.fill_diagonal(premat, np.abs(premat).sum(axis=1) + 0.5)

    premat1 = np.sqrt(np.outer(np.diag(premat), np.diag(premat)))
    premat = premat / premat1

    covmat = np.linalg.inv(premat)
    eigencov = np.linalg.eig(covmat)

    D = np.zeros((nn, nn))
    np.fill_diagonal(D, np.sqrt(eigencov[0]))

    covmats = eigencov[1] @ D @ eigencov[1].T

    bighubnum = 1
    counts = 0
    simudat = np.zeros((samples, nn))

    for i in range(samples):
        if i < numhub:
            simudat[i] = covmats @ np.random.randn(nn)
        else:
            simudat[i] = covmats @ np.random.randn(nn)


    s = simudat.copy()
    haha= simudat.copy()

    if case == 1:
        s[:, :numhub] *= bigwgt
    elif case == 2:
        s[:, :numhub//2] *= bigwgt
        s[:, numhub:(numhub + ((numhub + 1) // 2))] *= bigwgt
    elif case == 3:
        s[:, (numhub - (numhub // 2)):(numhub + (numhub // 2))] *= bigwgt
    elif case == 4:
        temp = np.random.choice(nn, numhub, replace=False)
        s[:, temp] *= bigwgt
    elif case == 5:
        s[:, np.random.choice(nn, nn // 2, replace=False)] *= bigwgt


    if not binaryopt:
        new_list = {
            "simudata": s,
            "originconx": conx,
            "rawsimudata": haha
        }
        np.savetxt('origin.txt', conx, fmt='%f', delimiter=' ')
        return new_list
    else:
        binary_conx = (conx > meanval).astype(int)
        new_list = {
            "simudata": binary_conx * s,
            "rawsimudata": binary_conx * haha,
            "originconx": binary_conx
        }
        np.savetxt('origin.txt', conx, fmt='%f', delimiter=' ')
        return new_list

a=simulated_data_codes(nn=60,
                      samples=300,
                      case=1,
                      numhub=3,
                      bighub=10,
                      bigwgt=1,
                      disconnected=15,
                      meanval=0,
                      sdval=1,
                      binaryopt=False)

del a

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx

# 필요한 데이터 설정
nn = 60
samples = 300
case = 1
numhub = 3
bighub = 10
bigwgt = 1
disconnected = 15
meanval = 0
sdval = 1
binaryopt = False

# 결과 계산
result_simulated_data = simulated_data_codes(nn=nn,
                                             samples=samples,
                                             case=case,
                                             numhub=numhub,
                                             bighub=bighub,
                                             bigwgt=bigwgt,
                                             disconnected=disconnected,
                                             meanval=meanval,
                                             sdval=sdval,
                                             binaryopt=binaryopt)


def plot_network(matrix):
    G = nx.from_numpy_array(matrix)
    pos = nx.spring_layout(G)
    nx.draw(G, pos, node_color='blue', node_size=100, alpha=0.8, with_labels=True, font_color='white', edge_color='black', width=1)
    plt.title('Network Graph representation of connections')
    plt.show()



# 시각화 초기화 후 실행
sns.set(style="white")
#plot_corr_matrix(result_simulated_data["originconx"])
plot_network(result_simulated_data["originconx"])

# 결과를 저장할 빈 리스트 생성
simulated_data_list = []

# 10개의 다양한 매개변수 조합을 바탕으로 데이터 생성
for i in range(10):
    result_simulated_data = simulated_data_codes(
        nn=nn + i*5,
        samples=samples,
        case=case,
        numhub=numhub + i,
        bighub=bighub + i,
        bigwgt=bigwgt,
        disconnected=disconnected + i,
        meanval=meanval,
        sdval=sdval,
        binaryopt=binaryopt
    )
    simulated_data_list.append(result_simulated_data)

# 생성된 데이터 시각화
for i, data in enumerate(simulated_data_list):
    print(f"Simulated Data {i+1}")
    plot_network(data["originconx"])

import random

# 결과를 저장할 빈 리스트 생성
simulated_data_random_list = []

# 10개의 다양한 랜덤 매개변수 조합을 바탕으로 데이터 생성
for i in range(10):
    result_simulated_data = simulated_data_codes(
        nn=random.randint(50, 100),
        samples=samples,
        case=case,
        numhub=random.randint(2, 10),
        bighub=random.randint(10, 30),
        bigwgt=bigwgt,
        disconnected=random.randint(10, 20),
        meanval=meanval,
        sdval=sdval,
        binaryopt=binaryopt
    )
    simulated_data_random_list.append(result_simulated_data)

# 생성된 데이터 시각화
for i, data in enumerate(simulated_data_random_list):
    print(f"Simulated Data {i+1}")
    plot_network(data["originconx"])

import matplotlib.cm as cm
import numpy as np

def plot_network(matrix, hubs_colors):
    G = nx.from_numpy_array(matrix)
    pos = nx.spring_layout(G)

    # 허브에 속한 노드를 찾고 색상 지정
    color_map = []
    for node in G.nodes():
        node_color = None
        for hub, color in hubs_colors.items():
            if G.has_edge(node, hub) or node == hub:
                node_color = color
                break
        color_map.append(node_color if node_color is not None else 'blue')

    nx.draw(G, pos, node_color=color_map, node_size=100, alpha=0.8, with_labels=True, font_color='white', edge_color='black', width=1)
    plt.title('Network Graph representation of connections')
    plt.show()

# 결과를 저장할 빈 리스트 생성
simulated_data_random_list = []

# 10개의 다양한 랜덤 매개변수 조합을 바탕으로 데이터 생성
for i in range(10):
    numhub = random.randint(2, 10)
    result_simulated_data = simulated_data_codes(
        nn=random.randint(50, 100),
        samples=samples,
        case=case,
        numhub=numhub,
        bighub=random.randint(10, 30),
        bigwgt=bigwgt,
        disconnected=random.randint(10, 20),
        meanval=meanval,
        sdval=sdval,
        binaryopt=binaryopt
    )
    simulated_data_random_list.append(result_simulated_data)

# 생성된 데이터 시각화
for i, data in enumerate(simulated_data_random_list):
    print(f"Simulated Data {i+1}")
    G = nx.from_numpy_array(data["originconx"])
    hubs_colors = dict(zip(sorted(get_hub_nodes(G, numhub)), cm.jet(np.linspace(0, 1, numhub))))
    plot_network(data["originconx"], hubs_colors)

# 10개의 다양한 랜덤 매개변수 조합을 바탕으로 데이터 생성
for i in range(10):
    numhub = random.randint(5, 15)
    result_simulated_data = simulated_data_codes(
        nn=random.randint(50, 100),
        samples=samples,
        case=case,
        numhub=numhub,
        bighub=random.randint(10, 30),
        bigwgt=bigwgt,
        disconnected=random.randint(10, 20),
        meanval=meanval,
        sdval=sdval,
        binaryopt=binaryopt
    )
    simulated_data_random_list.append(result_simulated_data)

# 생성된 데이터 시각화
for i, data in enumerate(simulated_data_random_list):
    print(f"Simulated Data {i+1}")
    G = nx.from_numpy_array(data["originconx"])
    hubs_colors = dict(zip(sorted(get_hub_nodes(G, numhub)), cm.jet(np.linspace(0, 1, numhub))))
    plot_network(data["originconx"], hubs_colors)

